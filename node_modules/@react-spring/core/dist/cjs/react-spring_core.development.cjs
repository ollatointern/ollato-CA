"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to2, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to2, key) && key !== except)
        __defProp(to2, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to2;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  BailSignal: () => BailSignal,
  Controller: () => Controller,
  FrameValue: () => FrameValue,
  Globals: () => import_shared22.Globals,
  Interpolation: () => Interpolation,
  Spring: () => Spring,
  SpringContext: () => SpringContext,
  SpringRef: () => SpringRef,
  SpringValue: () => SpringValue,
  Trail: () => Trail,
  Transition: () => Transition,
  config: () => config,
  createInterpolator: () => import_shared23.createInterpolator,
  easings: () => import_shared23.easings,
  inferTo: () => inferTo,
  interpolate: () => interpolate,
  to: () => to,
  update: () => update,
  useChain: () => useChain,
  useInView: () => useInView,
  useIsomorphicLayoutEffect: () => import_shared23.useIsomorphicLayoutEffect,
  useReducedMotion: () => import_shared23.useReducedMotion,
  useResize: () => useResize,
  useScroll: () => useScroll,
  useSpring: () => useSpring,
  useSpringRef: () => useSpringRef,
  useSpringValue: () => useSpringValue,
  useSprings: () => useSprings,
  useTrail: () => useTrail,
  useTransition: () => useTransition
});
module.exports = __toCommonJS(src_exports);

// src/hooks/useChain.ts
var import_shared2 = require("@react-spring/shared");

// src/helpers.ts
var import_shared = require("@react-spring/shared");
function callProp(value, ...args) {
  return import_shared.is.fun(value) ? value(...args) : value;
}
var matchProp = (value, key) => value === true || !!(key && value && (import_shared.is.fun(value) ? value(key) : (0, import_shared.toArray)(value).includes(key)));
var resolveProp = (prop, key) => import_shared.is.obj(prop) ? key && prop[key] : prop;
var getDefaultProp = (props, key) => props.default === true ? props[key] : props.default ? props.default[key] : void 0;
var noopTransform = (value) => value;
var getDefaultProps = (props, transform = noopTransform) => {
  let keys = DEFAULT_PROPS;
  if (props.default && props.default !== true) {
    props = props.default;
    keys = Object.keys(props);
  }
  const defaults2 = {};
  for (const key of keys) {
    const value = transform(props[key], key);
    if (!import_shared.is.und(value)) {
      defaults2[key] = value;
    }
  }
  return defaults2;
};
var DEFAULT_PROPS = [
  "config",
  